server:
  port: 8055
#  address: 172.17.0.99

eureka:
  client:
    serviceUrl:
      defaultZone: http://172.17.0.2:8052/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    hostname: 172.17.0.2


spring:
  main:
    web-application-type: reactive
    allow-bean-definition-overriding: true
    banner-mode: off
  application:
    name: ansv-gateway
  cloud:
    gateway:
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - AddResponseHeader=Access-Control-Allow-Origin, *
      globalcors:
        add-to-simple-url-handler-mapping: true
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods:
              - GET
              - POST
              - DELETE
              - PUT
              - OPTIONS
              - HEAD
            allowedHeaders: "*"
      routes:
        - id: app1
          uri: http://172.17.0.5:8091
          predicates:
            - Path=/app1/**
        - id: app2
          uri: http://172.17.0.5:8090
          predicates:
            - Path=/app2/**
        - id: task-management
          uri: http://172.17.0.5:8092
          predicates:
            - Path=/taskManagement/**
            - Method=GET,POST,PUT,DELETE,OPTIONS,HEAD
        - id: human-resource
          uri: http://172.17.0.7:8099
          predicates:
            - Path=/humanResource/**
            - Method=GET,POST,PUT,DELETE,OPTIONS,HEAD
      httpserver:
        wiretap: true

  ldap:
    server:
      base: CN=Users,DC=ansv,DC=vn
    authen:
      url: ldap://172.24.104.6:389
      managerDn: CN=Admin,CN=Users,DC=ansv,DC=vn
      managerPassword: 123456
      filter: userPrincipalName
#      password: userPassword
      dn-partterns: CN=Users,DC=ansv,DC=vn

#  datasource:
#    url: jdbc:postgresql://host.docker.internal:5432/Authorization
#    username: ansv
#    password: root
#    jpa:
#      properties:
#        hibernate:
#          dialect: org.hibernate.dialect.PostgreSQLDialect
#      show-sql: true
#      hibernate:
#        ddl-auto: none
  liquibase:
    enabled: false
    contexts: prod
  # redis configuration for caching
  cache:
    type: redis
    host: 172.17.0.3
    port: 6379
#    password: password
    ssl: false
  rabbitmq:
    host: 172.17.0.4
    port: 5672
    username: guest
    password: guest
    virtualHost: /
    exchange: request.events
    routingkey: detail.user.req
    queue: detail.user.task-management.req.queue
    routingkey-human: user.human.req
    queue-human: user.human-resource.req.queue
    exchange-received: response.events
    routingkey-received: detail.user.res
    queue-received: detail.user.task-management.res.queue
    routingkey-human-received: user.human.res
    queue-human-received: user.human-resource.res.queue

#redis
# cache configuration
resolved:
  cache:
    ttl: 60
    enabled: true

logging:
  level:
    reactor:
      netty: INFO
    org:
      springframework:
        cloud:
          gateway: TRACE

#jwttoken
app:
  jwtSecret: 9a02115a835ee03d5fb83cd8a468ea33e4090aaaec87f53c9fa54512bbef4db8dc656c82a315fa0c785c08b0134716b81ddcd0153d2a7556f2e154912cf5675f
  # miliseconds
  #  tokenValidity: 3600000
  tokenValidity: 6000000
  refreshTokenValidity: 604800000
  admin:
    username: adminansv
    password: 123456a@



